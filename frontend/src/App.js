import React, { useState, useEffect } from 'react';
import './App.css';

const WRONG_MESSAGES = {
  ua: [
    "–ù–µ –∑–æ–≤—Å—ñ–º —Ç–∞–∫... –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–µ—Å—å –ø–æ—Ä—É—á.",
    "–û–π! –¶–µ —Ö–∏–±–Ω–∞ —Å—Ç–µ–∂–∫–∞. –ü–æ–≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥ —ñ –æ–±–µ—Ä–∏ –º—É–¥—Ä—ñ—à–µ üòâ",
    "–¢–∞—î–º–Ω–∏—Ü—è –ª–∏—à–∞—î—Ç—å—Å—è –Ω–µ—Ä–æ–∑–≥–∞–¥–∞–Ω–æ—é... –û–±–µ—Ä–∏ —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, –∞–±–∏ –ø—Ä–æ—Å—É–Ω—É—Ç–∏—Å—å –¥–∞–ª—ñ."
  ],
  en: [
    "Not quite... Try again ‚Äî the right answer is somewhere nearby.",
    "Oops! This is the wrong path. Go back and choose wiser üòâ",
    "The mystery remains unsolved... Choose another option to move forward."
  ],
  fr: [
    "Pas tout √† fait... R√©essaie ‚Äî la bonne r√©ponse est quelque part pr√®s.",
    "Oups ! C'est le mauvais chemin. Reviens en arri√®re et choisis plus sagement üòâ",
    "Le myst√®re reste non r√©solu... Choisis une autre option pour avancer."
  ],
  de: [
    "Nicht ganz... Versuche es nochmal ‚Äî die richtige Antwort ist irgendwo in der N√§he.",
    "Ups! Das ist der falsche Weg. Geh zur√ºck und w√§hle weiser üòâ",
    "Das Geheimnis bleibt ungel√∂st... W√§hle eine andere Option, um voranzukommen."
  ]
};

const TRANSLATIONS = {
  ua: {
    gameTitle: "üü£ KYIV QUEST",
    gameSubtitle: "–Ω–µ–æ–Ω–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –º—ñ—Å—Ç–æ–º –ª–µ–≥–µ–Ω–¥",
    prologue: "üß≠ –ü—Ä–∏–≤—ñ—Ç, –º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫—É!\n–¢–∏ –≤–∏—Ä—É—à–∞—î—à —É –∑–∞—Ö–æ–ø–ª–∏–≤—É –ø–æ–¥–æ—Ä–æ–∂ —Å–µ—Ä—Ü–µ–º –ö–∏—î–≤–∞ ‚Äî –º—ñ—Å—Ç–∞, –¥–µ –∫–æ–∂–Ω–∞ –≤—É–ª–∏—Ü—è —à–µ–ø–æ—á–µ —ñ—Å—Ç–æ—Ä—ñ—ó, –∞ –∫–æ–∂–µ–Ω –∫–∞–º—ñ–Ω—å –∑–±–µ—Ä—ñ–≥–∞—î —Ç–∞—î–º–Ω–∏—Ü—ñ.\n–ù–∞ —Ç–µ–±–µ —á–µ–∫–∞—é—Ç—å 10 –∑–∞–≤–¥–∞–Ω—å ‚Äî –ø—ñ–∑–Ω–∞–≤–∞–ª—å–Ω—ñ, –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—ñ, –∑ –Ω–æ—Ç–∫–æ—é –º–∞–≥—ñ—ó —Ç–∞ –≥—É–º–æ—Ä—É.",
    teamName: "–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏",
    startQuest: "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É ‚Üí",
    continue: "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚Üí",
    restart: "–†–µ—Å—Ç–∞—Ä—Ç",
    correct: "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!",
    nextQuestion: "–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è...",
    correctAnswer: "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:",
    tryAgain: "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –ø—ñ–¥–∫–∞–∑–∫–æ—é",
    questCompleted: "üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
    team: "–ö–æ–º–∞–Ω–¥–∞:",
    time: "–ß–∞—Å:",
    correctAnswers: "–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:",
    startAgain: "–ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É",
    shareResult: "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
    hints: "üí° –ü—ñ–¥–∫–∞–∑–∫–∏",
    hint: "–ü—ñ–¥–∫–∞–∑–∫–∞",
    show: "–ü–æ–∫–∞–∑–∞—Ç–∏",
    bonusTask: "üéÅ –ë–æ–Ω—É—Å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è:",
    question: "–ü–∏—Ç–∞–Ω–Ω—è",
    of: "–∑",
    enterAnswer: "–í–≤–µ–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å...",
    adminLogin: "–õ–æ–≥—ñ–Ω –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
    adminPassword: "–ü–∞—Ä–æ–ª—å",
    login: "–£–≤—ñ–π—Ç–∏",
    wrongCredentials: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å!",
    adminPanel: "üîß –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å KYIV Quest",
    exit: "–í–∏—Ö—ñ–¥",
    statistics: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    settings: "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
    questQuestions: "üìù –ü–∏—Ç–∞–Ω–Ω—è –∫–≤–µ—Å—Ç—É",
    changePassword: "–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å",
    newPassword: "–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å",
    passwordChanged: "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!",
    editQuestions: "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è",
    configureHints: "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫–∏",
    exportData: "–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö",
    edit: "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏",
    correctAnswerLabel: "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:",
    totalTeams: "–í—Å—å–æ–≥–æ –∫–æ–º–∞–Ω–¥:",
    activeGames: "–ê–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä:",
    completedGames: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —ñ–≥–æ—Ä:",
    qrCode: "QR-–∫–æ–¥ –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è:",
    scanToJoin: "–°–∫–∞–Ω—É–π—Ç–µ —Ü–µ–π –∫–æ–¥, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏",
    allJoined: "–í—Å—ñ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å, –≤–ø–µ—Ä–µ–¥ –¥–æ –ø—Ä–∏–≥–æ–¥üòé",
    waitingForTeam: "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥–∏..."
  },
  en: {
    gameTitle: "üü£ KYIV QUEST",
    gameSubtitle: "neon route through the city of legends",
    prologue: "üß≠ Hello, traveler!\nYou are embarking on an exciting journey through the heart of Kyiv ‚Äî a city where every street whispers stories and every stone holds secrets.\n10 tasks await you ‚Äî educational, unexpected, with a touch of magic and humor.",
    teamName: "Team Name",
    startQuest: "Create Team ‚Üí",
    continue: "Continue ‚Üí",
    restart: "Restart",
    correct: "‚úÖ Correct!",
    nextQuestion: "Moving to the next question...",
    correctAnswer: "Correct answer:",
    tryAgain: "Try again or use a hint",
    questCompleted: "üéâ Quest Completed!",
    team: "Team:",
    time: "Time:",
    correctAnswers: "Correct answers:",
    startAgain: "Start Again",
    shareResult: "Share Result",
    hints: "üí° Hints",
    hint: "Hint",
    show: "Show",
    bonusTask: "üéÅ Bonus Task:",
    question: "Question",
    of: "of",
    enterAnswer: "Enter answer...",
    adminLogin: "Administrator Login",
    adminPassword: "Password",
    login: "Login",
    wrongCredentials: "Wrong login or password!",
    adminPanel: "üîß KYIV Quest Admin Panel",
    exit: "Exit",
    statistics: "üìä Statistics",
    settings: "‚öôÔ∏è Settings",
    questQuestions: "üìù Quest Questions",
    changePassword: "Change Password",
    newPassword: "New Password",
    passwordChanged: "Password successfully changed!",
    editQuestions: "Edit Questions",
    configureHints: "Configure Hints",
    exportData: "Export Data",
    edit: "Edit",
    correctAnswerLabel: "Correct answer:",
    totalTeams: "Total teams:",
    activeGames: "Active games:",
    completedGames: "Completed games:",
    qrCode: "QR Code to join:",
    scanToJoin: "Scan this code to join the team",
    allJoined: "Everyone joined, let's go to adventuresüòé",
    waitingForTeam: "Waiting for team members..."
  },
  fr: {
    gameTitle: "üü£ KYIV QUEST",
    gameSubtitle: "route n√©on √† travers la ville des l√©gendes",
    prologue: "üß≠ Salut, voyageur !\nTu te lances dans un voyage passionnant au c≈ìur de Kiev ‚Äî une ville o√π chaque rue murmure des histoires et chaque pierre garde des secrets.\n10 t√¢ches t'attendent ‚Äî √©ducatives, inattendues, avec une touche de magie et d'humour.",
    teamName: "Nom de l'√©quipe",
    startQuest: "Cr√©er l'√©quipe ‚Üí",
    continue: "Continuer ‚Üí",
    restart: "Red√©marrer",
    correct: "‚úÖ Correct !",
    nextQuestion: "Passage √† la question suivante...",
    correctAnswer: "Bonne r√©ponse :",
    tryAgain: "R√©essaie ou utilise un indice",
    questCompleted: "üéâ Qu√™te termin√©e !",
    team: "√âquipe :",
    time: "Temps :",
    correctAnswers: "Bonnes r√©ponses :",
    startAgain: "Recommencer",
    shareResult: "Partager le r√©sultat",
    hints: "üí° Indices",
    hint: "Indice",
    show: "Montrer",
    bonusTask: "üéÅ T√¢che bonus :",
    question: "Question",
    of: "sur",
    enterAnswer: "Entrer la r√©ponse...",
    adminLogin: "Connexion administrateur",
    adminPassword: "Mot de passe",
    login: "Se connecter",
    wrongCredentials: "Mauvais login ou mot de passe !",
    adminPanel: "üîß Panneau d'administration KYIV Quest",
    exit: "Sortir",
    statistics: "üìä Statistiques",
    settings: "‚öôÔ∏è Param√®tres",
    questQuestions: "üìù Questions de la qu√™te",
    changePassword: "Changer le mot de passe",
    newPassword: "Nouveau mot de passe",
    passwordChanged: "Mot de passe chang√© avec succ√®s !",
    editQuestions: "√âditer les questions",
    configureHints: "Configurer les indices",
    exportData: "Exporter les donn√©es",
    edit: "√âditer",
    correctAnswerLabel: "Bonne r√©ponse :",
    totalTeams: "Total des √©quipes :",
    activeGames: "Jeux actifs :",
    completedGames: "Jeux termin√©s :",
    qrCode: "Code QR pour rejoindre :",
    scanToJoin: "Scannez ce code pour rejoindre l'√©quipe",
    allJoined: "Tout le monde a rejoint, allons aux aventuresüòé",
    waitingForTeam: "En attente des membres de l'√©quipe..."
  },
  de: {
    gameTitle: "üü£ KYIV QUEST",
    gameSubtitle: "neon-route durch die stadt der legenden",
    prologue: "üß≠ Hallo, Reisender!\nDu begibst dich auf eine aufregende Reise durch das Herz von Kiew ‚Äî eine Stadt, in der jede Stra√üe Geschichten fl√ºstert und jeder Stein Geheimnisse bewahrt.\n10 Aufgaben erwarten dich ‚Äî lehrreich, unerwartet, mit einem Hauch von Magie und Humor.",
    teamName: "Teamname",
    startQuest: "Team erstellen ‚Üí",
    continue: "Weiter ‚Üí",
    restart: "Neustart",
    correct: "‚úÖ Richtig!",
    nextQuestion: "Zur n√§chsten Frage...",
    correctAnswer: "Richtige Antwort:",
    tryAgain: "Versuche es nochmal oder nutze einen Hinweis",
    questCompleted: "üéâ Quest abgeschlossen!",
    team: "Team:",
    time: "Zeit:",
    correctAnswers: "Richtige Antworten:",
    startAgain: "Neu starten",
    shareResult: "Ergebnis teilen",
    hints: "üí° Hinweise",
    hint: "Hinweis",
    show: "Zeigen",
    bonusTask: "üéÅ Bonusaufgabe:",
    question: "Frage",
    of: "von",
    enterAnswer: "Antwort eingeben...",
    adminLogin: "Administrator-Anmeldung",
    adminPassword: "Passwort",
    login: "Anmelden",
    wrongCredentials: "Falscher Login oder Passwort!",
    adminPanel: "üîß KYIV Quest Admin-Panel",
    exit: "Beenden",
    statistics: "üìä Statistiken",
    settings: "‚öôÔ∏è Einstellungen",
    questQuestions: "üìù Quest-Fragen",
    changePassword: "Passwort √§ndern",
    newPassword: "Neues Passwort",
    passwordChanged: "Passwort erfolgreich ge√§ndert!",
    editQuestions: "Fragen bearbeiten",
    configureHints: "Hinweise konfigurieren",
    exportData: "Daten exportieren",
    edit: "Bearbeiten",
    correctAnswerLabel: "Richtige Antwort:",
    totalTeams: "Gesamte Teams:",
    activeGames: "Aktive Spiele:",
    completedGames: "Abgeschlossene Spiele:",
    qrCode: "QR-Code zum Beitreten:",
    scanToJoin: "Scannen Sie diesen Code, um dem Team beizutreten",
    allJoined: "Alle sind beigetreten, lasst uns zu den Abenteuernüòé",
    waitingForTeam: "Warten auf Teammitglieder..."
  }
};

const QUESTIONS = {
  ua: [
    {
      id: 1,
      location: "üè∞ –°–æ—Ñ—ñ–π—Å—å–∫–∞ –ø–ª–æ—â–∞",
      question: "–¢—É—Ç —Å—Ç–æ—ó—Ç—å –ø–∞–º'—è—Ç–Ω–∏–∫ –≥–µ—Ç—å–º–∞–Ω—É, —è–∫–æ–≥–æ —á–∞—Å—Ç–æ –ø–ª—É—Ç–∞—é—Ç—å –∑ —ñ–Ω—à–∏–º —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏–º –¥—ñ—è—á–µ–º.\n\n–ü–∏—Ç–∞–Ω–Ω—è: –•—Ç–æ –∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –ø–∞–º'—è—Ç–Ω–∏–∫—É?",
      type: "multiple",
      options: [
        "A. –Ü–≤–∞–Ω –ú–∞–∑–µ–ø–∞",
        "B. –ë–æ–≥–¥–∞–Ω –•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π", 
        "C. –ü–µ—Ç—Ä–æ –°–∞–≥–∞–π–¥–∞—á–Ω–∏–π",
        "D. –î–∞–Ω–∏–ª–æ –ì–∞–ª–∏—Ü—å–∫–∏–π"
      ],
      correct: "B",
      bonus: "–ó–Ω–∞–π–¥–∏ –≤–∏–≤—ñ—Å–∫—É –Ω–∞ —Ñ–∞—Å–∞–¥—ñ –Ω–∞–≤–ø—Ä–æ—Ç–∏ –ø–∞–º'—è—Ç–Ω–∏–∫–∞ –∑ –±—ñ–ª—å—à –Ω—ñ–∂ 2 –∫–æ–ª—å–æ—Ä–∞–º–∏. –ó–∞–ø–∏—à–∏ —ó—ó –∞–±–æ –∑—Ä–æ–±–∏ —Å–µ–ª—Ñ—ñ –Ω–∞ —Ñ–æ–Ω—ñ –π –∑–∞–ø–æ—Å—Ç–∏ –∑ #KyivQuest",
      hints: [
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 1: –¶–µ –≤–∏–∑–Ω–∞—á–Ω–∞ –ø–æ—Å—Ç–∞—Ç—å –∫–æ–∑–∞—Ü—å–∫–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 2: –ô–æ–≥–æ —ñ–º'—è –ø–æ–≤'—è–∑–∞–Ω–µ –∑ –≤–∏–∑–≤–æ–ª—å–Ω–æ—é –≤—ñ–π–Ω–æ—é 1648 —Ä–æ–∫—É",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: B. –ë–æ–≥–¥–∞–Ω –•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π"
      ]
    },
    {
      id: 2,
      location: "üïç –ê–Ω–¥—Ä—ñ—ó–≤—Å—å–∫–∞ —Ü–µ—Ä–∫–≤–∞",
      question: "–û–¥–∏–Ω —ñ–∑ —Å–∏–º–≤–æ–ª—ñ–≤ –ö–∏—î–≤–∞, –ø–æ–±—É–¥–æ–≤–∞–Ω–∏–π —É —Å—Ç–∏–ª—ñ –±–∞—Ä–æ–∫–æ.\n\n–ü–∏—Ç–∞–Ω–Ω—è: –•—Ç–æ –±—É–≤ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä–æ–º —Ü—ñ—î—ó —Ü–µ—Ä–∫–≤–∏?",
      type: "multiple",
      options: [
        "A. –§—Ä–∞–Ω—á–µ—Å–∫–æ –†–∞—Å—Ç—Ä–µ–ª–ª—ñ",
        "B. –í–æ–ª–æ–¥–∏–º–∏—Ä –ù—ñ–∫–æ–ª–∞—î–≤",
        "C. –Ü–≤–∞–Ω –ì—Ä–∏–≥–æ—Ä–æ–≤–∏—á-–ë–∞—Ä—Å—å–∫–∏–π", 
        "D. –û–≥—é—Å—Ç –ú–æ–Ω—Ñ–µ—Ä—Ä–∞–Ω"
      ],
      correct: "A",
      bonus: "–ü–æ—Ä–∞—Ö—É–π –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω –Ω–∞–≤–∫–æ–ª–æ —Ü–µ—Ä–∫–≤–∏. –°–∫—ñ–ª—å–∫–∏ —ó—Ö?",
      hints: [
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 1: –Ü—Ç–∞–ª—ñ–π—Å—å–∫–∏–π –∞—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä –µ–ø–æ—Ö–∏ –±–∞—Ä–æ–∫–æ",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 2: –¢–∞–∫–æ–∂ —Å–ø—Ä–æ—î–∫—Ç—É–≤–∞–≤ –ó–∏–º–æ–≤–∏–π –ø–∞–ª–∞—Ü —É –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–∑—ñ",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: A. –§—Ä–∞–Ω—á–µ—Å–∫–æ –†–∞—Å—Ç—Ä–µ–ª–ª—ñ"
      ]
    },
    {
      id: 3,
      location: "üèõÔ∏è –ë—É–¥–∏–Ω–æ–∫ –∑ —Ö–∏–º–µ—Ä–∞–º–∏",
      question: "–¶–µ–π –¥—ñ–º ‚Äî –ª–µ–≥–µ–Ω–¥–∞ –∫–∏—ó–≤—Å—å–∫–æ–≥–æ –º–æ–¥–µ—Ä–Ω—É –∑ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–∏–º–∏ —ñ—Å—Ç–æ—Ç–∞–º–∏.\n\n–ü–∏—Ç–∞–Ω–Ω—è: –Ø–∫—É –ø—Ä–æ—Ñ–µ—Å—ñ—é –º–∞–≤ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä –í–ª–∞–¥–∏—Å–ª–∞–≤ –ì–æ—Ä–æ–¥–µ—Ü—å–∫–∏–π, –∫—Ä—ñ–º –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏?",
      type: "multiple",
      options: [
        "A. –ü–æ–ª—ñ—Ç–∏–∫",
        "B. –ú–∏—Å–ª–∏–≤–µ—Ü—å",
        "C. –•—É–¥–æ–∂–Ω–∏–∫",
        "D. –ê–∫—Ç–æ—Ä"
      ],
      correct: "B",
      bonus: "–ó–Ω–∞–π–¥–∏ —ñ—Å—Ç–æ—Ç—É –Ω–∞ —Ñ–∞—Å–∞–¥—ñ, —è–∫–∞ –Ω–µ —ñ—Å–Ω—É—î –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –∂–∏—Ç—Ç—ñ. –Ø–∫ –≤–æ–Ω–∞ –≤–∏–≥–ª—è–¥–∞—î?",
      hints: [
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 1: –ô–æ–≥–æ —Ö–æ–±—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –≤ –¥–µ–∫–æ—Ä—ñ –±—É–¥–∏–Ω–∫—É",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 2: –¢–≤–∞—Ä–∏–Ω–∏ –Ω–∞ —Ñ–∞—Å–∞–¥—ñ - —Ü–µ –π–æ–≥–æ —Ç—Ä–æ—Ñ–µ—ó",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: B. –ú–∏—Å–ª–∏–≤–µ—Ü—å"
      ]
    },
    {
      id: 4,
      location: "üöÉ –§—É–Ω—ñ–∫—É–ª–µ—Ä",
      question: "–ó'—î–¥–Ω—É—î –ü–æ–¥—ñ–ª —ñ–∑ –í–µ—Ä—Ö–Ω—ñ–º –º—ñ—Å—Ç–æ–º.\n\n–ü–∏—Ç–∞–Ω–Ω—è: –£ —è–∫–æ–º—É —Ä–æ—Ü—ñ –≤—ñ–¥–∫—Ä–∏—Ç–æ –∫–∏—ó–≤—Å—å–∫–∏–π —Ñ—É–Ω—ñ–∫—É–ª–µ—Ä?",
      type: "open",
      correct: "1905",
      bonus: "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É–π –≤–∞–≥–æ–Ω —É —Ä—É—Å—ñ –∞–±–æ –Ω–∞–ø–∏—à–∏, —Å–∫—ñ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥ –∑–∞–π–º–∞—î –ø–æ—ó–∑–¥–∫–∞ –≤–≥–æ—Ä—É.",
      hints: [
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 1: –ü–æ—á–∞—Ç–æ–∫ XX —Å—Ç–æ–ª—ñ—Ç—Ç—è",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 2: –ß–µ—Ä–µ–∑ 5 —Ä–æ–∫—ñ–≤ –ø—ñ—Å–ª—è 1900 —Ä–æ–∫—É",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: 1905"
      ]
    },
    {
      id: 5,
      location: "üíí –ü–æ–¥—ñ–ª, –ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤–∞ –ø–ª–æ—â–∞",
      question: "–¢—É—Ç ‚Äî –ø–∞–º'—è—Ç–Ω–∏–∫ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–º—É —Ñ—ñ–ª–æ—Å–æ—Ñ—É.\n\n–ü–∏—Ç–∞–Ω–Ω—è: –Ø–∫–∞ —Ñ—Ä–∞–∑–∞ –≤–∏–∫–∞—Ä–±—É–≤–∞–Ω–∞ –±—ñ–ª—è –ø–∞–º'—è—Ç–Ω–∏–∫–∞ –ì—Ä–∏–≥–æ—Ä—ñ—é –°–∫–æ–≤–æ—Ä–æ–¥—ñ?",
      type: "open",
      correct: "–ø—ñ–∑–Ω–∞–π —Å–µ–±–µ",
      bonus: "–ó–Ω–∞–π–¥–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–π –º—É—Ä–∞–ª —ñ –æ–ø–∏—à–∏ –π–æ–≥–æ.",
      hints: [
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 1: –î–∞–≤–Ω—å–æ–≥—Ä–µ—Ü—å–∫–∞ —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∞ –º—É–¥—Ä—ñ—Å—Ç—å",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 2: –ó–∞–∫–ª–∏–∫ –¥–æ —Å–∞–º–æ–ø—ñ–∑–Ω–∞–Ω–Ω—è",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –ø—ñ–∑–Ω–∞–π —Å–µ–±–µ"
      ]
    },
    {
      id: 6,
      location: "üß™ –ù–∞—É–∫–æ–≤–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ —ñ–º. –í–µ—Ä–Ω–∞–¥—Å—å–∫–æ–≥–æ",
      question: "–û–¥–Ω–∞ –∑ –Ω–∞–π–±—ñ–ª—å—à–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫ —É —Å–≤—ñ—Ç—ñ.\n\n–ü–∏—Ç–∞–Ω–Ω—è: –°–∫—ñ–ª—å–∫–∏ –ø–æ–≤–µ—Ä—Ö—ñ–≤ –º–∞—î –≥–æ–ª–æ–≤–Ω–∏–π –∫–æ—Ä–ø—É—Å?",
      type: "open",
      correct: "22",
      bonus: "–ü–æ—Ä–∞—Ö—É–π—Ç–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–º–ø —É —á–∏—Ç–∞–ª—å–Ω–æ–º—É –∑–∞–ª—ñ. –ß–∏ –≤—Å—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ?",
      hints: [
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 1: –ë—ñ–ª—å—à–µ 20 –ø–æ–≤–µ—Ä—Ö—ñ–≤",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 2: –ü–∞—Ä–Ω–µ —á–∏—Å–ª–æ",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: 22"
      ]
    },
    {
      id: 7,
      location: "üóº –¢–µ–ª–µ–≤–µ–∂–∞",
      question: "–ù–∞–π–≤–∏—â–∞ —Å–ø–æ—Ä—É–¥–∞ –£–∫—Ä–∞—ó–Ω–∏.\n\n–ü–∏—Ç–∞–Ω–Ω—è: –Ø–∫–∞ —ó—ó —Ç–æ—á–Ω–∞ –≤–∏—Å–æ—Ç–∞?",
      type: "open",
      correct: "385",
      bonus: "–ó–Ω–∞–π–¥–∏ —Ç–æ—á–∫—É, –¥–µ –≤–æ–Ω–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —É —Å–∫–ª—ñ —á–∏ –≤–æ–¥—ñ. –ó—Ä–æ–±–∏ —Ñ–æ—Ç–æ.",
      hints: [
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 1: –ë—ñ–ª—å—à–µ 300 –º–µ—Ç—Ä—ñ–≤",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 2: –ú–µ–Ω—à–µ 400 –º–µ—Ç—Ä—ñ–≤",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: 385 –º–µ—Ç—Ä—ñ–≤"
      ]
    },
    {
      id: 8,
      location: "üßë‚Äçüé® –ü–µ–π–∑–∞–∂–Ω–∞ –∞–ª–µ—è",
      question: "–ö–∞–∑–∫–æ–≤–µ –º—ñ—Å—Ü–µ –∑ –∞—Ä—Ç-—ñ–Ω—Å—Ç–∞–ª—è—Ü—ñ—è–º–∏.\n\n–ü–∏—Ç–∞–Ω–Ω—è: –•—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤ —Å–∫—É–ª—å–ø—Ç—É—Ä–∏ –Ω–∞ –ü–µ–π–∑–∞–∂–Ω—ñ–π –∞–ª–µ—ó?",
      type: "multiple",
      options: [
        "A. –ö–æ—Å—Ç—è–Ω—Ç–∏–Ω –°–∫—Ä–∏—Ç—É—Ü—å–∫–∏–π",
        "B. –Ü–ª–ª—è –†—î–ø—ñ–Ω",
        "C. –û–ª–µ–≥ –ü—ñ–Ω—á—É–∫",
        "D. –õ–µ—Å—è –£–∫—Ä–∞—ó–Ω–∫–∞"
      ],
      correct: "A",
      bonus: "–í–∏–≥–∞–¥–∞–π —ñ–º'—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤-—Å–∫—É–ª—å–ø—Ç—É—Ä. –Ø–∫–∞ –≤ –Ω—å–æ–≥–æ —Å—É–ø–µ—Ä—Å–∏–ª–∞?",
      hints: [
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 1: –°—É—á–∞—Å–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Å–∫—É–ª—å–ø—Ç–æ—Ä",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 2: –°—Ç–≤–æ—Ä—é—î –∫–∞–∑–∫–æ–≤—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: A. –ö–æ—Å—Ç—è–Ω—Ç–∏–Ω –°–∫—Ä–∏—Ç—É—Ü—å–∫–∏–π"
      ]
    },
    {
      id: 9,
      location: "üç´ –†–æ—à–µ–Ω-—Ñ–æ–Ω—Ç–∞–Ω",
      question: "–¢—É—Ç –≤–µ—á–æ—Ä–∞–º–∏ ‚Äî —Å–≤—ñ—Ç–ª–æ–º—É–∑–∏—á–Ω–µ —à–æ—É.\n\n–ü–∏—Ç–∞–Ω–Ω—è: –Ø–∫–æ–≥–æ —Ä–æ–∫—É –≤—ñ–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π?",
      type: "open",
      correct: "2011",
      bonus: "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É–π –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–≤—ñ—Ç–ª–∞ –Ω–∞ –≤–æ–¥—ñ. –Ø–∫—ñ –∫–æ–ª—å–æ—Ä–∏ –±–∞—á–∏—à?",
      hints: [
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 1: –ü–æ—á–∞—Ç–æ–∫ 2010-—Ö —Ä–æ–∫—ñ–≤",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 2: –†—ñ–∫ –ø—ñ—Å–ª—è 2010",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: 2011"
      ]
    },
    {
      id: 10,
      location: "üèü –û–ª—ñ–º–ø—ñ–π—Å—å–∫–∏–π —Å—Ç–∞–¥—ñ–æ–Ω",
      question: "–ú—ñ—Å—Ü–µ —Ñ—É—Ç–±–æ–ª—å–Ω–∏—Ö –±–∞—Ç–∞–ª—ñ–π —Ç–∞ –∫–æ–Ω—Ü–µ—Ä—Ç—ñ–≤.\n\n–ü–∏—Ç–∞–Ω–Ω—è: –°–∫—ñ–ª—å–∫–∏ –≥–ª—è–¥–∞—á—ñ–≤ –≤–º—ñ—â—É—î —Å—Ç–∞–¥—ñ–æ–Ω?",
      type: "open",
      correct: "70050",
      bonus: "–ó—Ä–æ–±–∏ —Ñ–æ—Ç–æ –∑ \"—Ñ—É—Ç–±–æ–ª—å–Ω–æ—ó\" –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏. –í–∏–≥–ª—è–¥–∞—î—à —è–∫ —Ç—Ä–µ–Ω–µ—Ä?",
      hints: [
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 1: –ë—ñ–ª—å—à–µ 70 —Ç–∏—Å—è—á",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 2: –¢–æ—á–Ω–∞ —Ü–∏—Ñ—Ä–∞ –∑ –Ω—É–ª—è–º–∏",
        "–ü—ñ–¥–∫–∞–∑–∫–∞ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: 70050"
      ]
    }
  ],
  en: [
    {
      id: 1,
      location: "üè∞ Sofia Square",
      question: "Here stands a monument to a hetman who is often confused with another historical figure.\n\nQuestion: Who is depicted on the monument?",
      type: "multiple",
      options: [
        "A. Ivan Mazepa",
        "B. Bogdan Khmelnitsky", 
        "C. Petro Sahaidachny",
        "D. Danylo Halytsky"
      ],
      correct: "B",
      bonus: "Find a sign on the facade opposite the monument with more than 2 colors. Write it down or take a selfie and post with #KyivQuest",
      hints: [
        "Hint 1: This is a prominent figure in Cossack history",
        "Hint 2: His name is associated with the liberation war of 1648",
        "Hint 3: Correct answer: B. Bogdan Khmelnitsky"
      ]
    },
    {
      id: 2,
      location: "üïç St. Andrew's Church",
      question: "One of Kyiv's symbols, built in baroque style.\n\nQuestion: Who was the architect of this church?",
      type: "multiple",
      options: [
        "A. Francesco Rastrelli",
        "B. Volodymyr Nikolaev",
        "C. Ivan Hryhorovych-Barsky", 
        "D. Auguste Montferrand"
      ],
      correct: "A",
      bonus: "Count the number of columns around the church. How many are there?",
      hints: [
        "Hint 1: Italian architect of the baroque era",
        "Hint 2: Also designed the Winter Palace in St. Petersburg",
        "Hint 3: Correct answer: A. Francesco Rastrelli"
      ]
    },
    {
      id: 3,
      location: "üèõÔ∏è House with Chimeras",
      question: "This house is a legend of Kyiv's Art Nouveau with fantastic creatures.\n\nQuestion: What profession did architect Vladislav Horodetsky have besides architecture?",
      type: "multiple",
      options: [
        "A. Politician",
        "B. Hunter",
        "C. Artist",
        "D. Actor"
      ],
      correct: "B",
      bonus: "Find a creature on the facade that doesn't exist in real life. What does it look like?",
      hints: [
        "Hint 1: His hobby is reflected in the building's decor",
        "Hint 2: The animals on the facade are his trophies",
        "Hint 3: Correct answer: B. Hunter"
      ]
    },
    {
      id: 4,
      location: "üöÉ Funicular",
      question: "Connects Podil with the Upper City.\n\nQuestion: In what year was the Kyiv funicular opened?",
      type: "open",
      correct: "1905",
      bonus: "Take a photo of the car in motion or write how many seconds the trip up takes.",
      hints: [
        "Hint 1: Beginning of the 20th century",
        "Hint 2: 5 years after 1900",
        "Hint 3: Correct answer: 1905"
      ]
    },
    {
      id: 5,
      location: "üíí Podil, Contract Square",
      question: "Here is a monument to the legendary philosopher.\n\nQuestion: What phrase is carved near the monument to Hryhoriy Skovoroda?",
      type: "open",
      correct: "know yourself",
      bonus: "Find the nearest mural and describe it.",
      hints: [
        "Hint 1: Ancient Greek philosophical wisdom",
        "Hint 2: A call to self-knowledge",
        "Hint 3: Correct answer: know yourself"
      ]
    },
    {
      id: 6,
      location: "üß™ Vernadsky National Library",
      question: "One of the largest libraries in the world.\n\nQuestion: How many floors does the main building have?",
      type: "open",
      correct: "22",
      bonus: "Count the number of lamps in the reading room. Are they all the same?",
      hints: [
        "Hint 1: More than 20 floors",
        "Hint 2: Even number",
        "Hint 3: Correct answer: 22"
      ]
    },
    {
      id: 7,
      location: "üóº TV Tower",
      question: "The tallest structure in Ukraine.\n\nQuestion: What is its exact height?",
      type: "open",
      correct: "385",
      bonus: "Find a point where it's reflected in glass or water. Take a photo.",
      hints: [
        "Hint 1: More than 300 meters",
        "Hint 2: Less than 400 meters",
        "Hint 3: Correct answer: 385 meters"
      ]
    },
    {
      id: 8,
      location: "üßë‚Äçüé® Landscape Alley",
      question: "A fairy-tale place with art installations.\n\nQuestion: Who created the sculptures on Landscape Alley?",
      type: "multiple",
      options: [
        "A. Kostiantyn Skrytutsky",
        "B. Illia Repin",
        "C. Oleh Pinchuk",
        "D. Lesia Ukrainka"
      ],
      correct: "A",
      bonus: "Make up a name for one of the sculpture characters. What's their superpower?",
      hints: [
        "Hint 1: Contemporary Ukrainian sculptor",
        "Hint 2: Creates fairy-tale characters",
        "Hint 3: Correct answer: A. Kostiantyn Skrytutsky"
      ]
    },
    {
      id: 9,
      location: "üç´ Roshen Fountain",
      question: "Here evenings feature light and music shows.\n\nQuestion: What year was it opened?",
      type: "open",
      correct: "2011",
      bonus: "Take a photo of light reflection on water. What colors do you see?",
      hints: [
        "Hint 1: Early 2010s",
        "Hint 2: Year after 2010",
        "Hint 3: Correct answer: 2011"
      ]
    },
    {
      id: 10,
      location: "üèü Olympic Stadium",
      question: "Venue for football battles and concerts.\n\nQuestion: How many spectators does the stadium hold?",
      type: "open",
      correct: "70050",
      bonus: "Take a photo from a 'football' perspective. Do you look like a coach?",
      hints: [
        "Hint 1: More than 70 thousand",
        "Hint 2: Exact number with zeros",
        "Hint 3: Correct answer: 70050"
      ]
    }
  ],
  fr: [
    {
      id: 1,
      location: "üè∞ Place Sainte-Sophie",
      question: "Ici se dresse un monument √† un hetman souvent confondu avec un autre personnage historique.\n\nQuestion : Qui est repr√©sent√© sur le monument ?",
      type: "multiple",
      options: [
        "A. Ivan Mazepa",
        "B. Bogdan Khmelnitsky", 
        "C. Petro Sahaidachny",
        "D. Danylo Halytsky"
      ],
      correct: "B",
      bonus: "Trouvez une enseigne sur la fa√ßade en face du monument avec plus de 2 couleurs. Notez-la ou prenez un selfie et postez avec #KyivQuest",
      hints: [
        "Indice 1 : C'est une figure √©minente de l'histoire cosaque",
        "Indice 2 : Son nom est associ√© √† la guerre de lib√©ration de 1648",
        "Indice 3 : Bonne r√©ponse : B. Bogdan Khmelnitsky"
      ]
    },
    {
      id: 2,
      location: "üïç √âglise Saint-Andr√©",
      question: "L'un des symboles de Kiev, construit en style baroque.\n\nQuestion : Qui √©tait l'architecte de cette √©glise ?",
      type: "multiple",
      options: [
        "A. Francesco Rastrelli",
        "B. Volodymyr Nikolaev",
        "C. Ivan Hryhorovych-Barsky", 
        "D. Auguste Montferrand"
      ],
      correct: "A",
      bonus: "Comptez le nombre de colonnes autour de l'√©glise. Combien y en a-t-il ?",
      hints: [
        "Indice 1 : Architecte italien de l'√©poque baroque",
        "Indice 2 : A aussi con√ßu le Palais d'Hiver √† Saint-P√©tersbourg",
        "Indice 3 : Bonne r√©ponse : A. Francesco Rastrelli"
      ]
    },
    {
      id: 3,
      location: "üèõÔ∏è Maison aux Chim√®res",
      question: "Cette maison est une l√©gende de l'Art nouveau ki√©vien avec des cr√©atures fantastiques.\n\nQuestion : Quelle profession avait l'architecte Vladislav Horodetsky en plus de l'architecture ?",
      type: "multiple",
      options: [
        "A. Politicien",
        "B. Chasseur",
        "C. Artiste",
        "D. Acteur"
      ],
      correct: "B",
      bonus: "Trouvez une cr√©ature sur la fa√ßade qui n'existe pas dans la vraie vie. √Ä quoi ressemble-t-elle ?",
      hints: [
        "Indice 1 : Son passe-temps se refl√®te dans le d√©cor du b√¢timent",
        "Indice 2 : Les animaux sur la fa√ßade sont ses troph√©es",
        "Indice 3 : Bonne r√©ponse : B. Chasseur"
      ]
    },
    {
      id: 4,
      location: "üöÉ Funiculaire",
      question: "Relie Podil √† la Ville Haute.\n\nQuestion : En quelle ann√©e le funiculaire de Kiev a-t-il √©t√© ouvert ?",
      type: "open",
      correct: "1905",
      bonus: "Prenez une photo de la voiture en mouvement ou √©crivez combien de secondes dure le trajet vers le haut.",
      hints: [
        "Indice 1 : D√©but du 20e si√®cle",
        "Indice 2 : 5 ans apr√®s 1900",
        "Indice 3 : Bonne r√©ponse : 1905"
      ]
    },
    {
      id: 5,
      location: "üíí Podil, Place des Contrats",
      question: "Ici se trouve un monument au philosophe l√©gendaire.\n\nQuestion : Quelle phrase est grav√©e pr√®s du monument √† Hryhoriy Skovoroda ?",
      type: "open",
      correct: "connais-toi toi-m√™me",
      bonus: "Trouvez la fresque murale la plus proche et d√©crivez-la.",
      hints: [
        "Indice 1 : Sagesse philosophique grecque antique",
        "Indice 2 : Un appel √† la connaissance de soi",
        "Indice 3 : Bonne r√©ponse : connais-toi toi-m√™me"
      ]
    },
    {
      id: 6,
      location: "üß™ Biblioth√®que nationale Vernadsky",
      question: "L'une des plus grandes biblioth√®ques du monde.\n\nQuestion : Combien d'√©tages a le b√¢timent principal ?",
      type: "open",
      correct: "22",
      bonus: "Comptez le nombre de lampes dans la salle de lecture. Sont-elles toutes identiques ?",
      hints: [
        "Indice 1 : Plus de 20 √©tages",
        "Indice 2 : Nombre pair",
        "Indice 3 : Bonne r√©ponse : 22"
      ]
    },
    {
      id: 7,
      location: "üóº Tour de t√©l√©vision",
      question: "La plus haute structure d'Ukraine.\n\nQuestion : Quelle est sa hauteur exacte ?",
      type: "open",
      correct: "385",
      bonus: "Trouvez un point o√π elle se refl√®te dans le verre ou l'eau. Prenez une photo.",
      hints: [
        "Indice 1 : Plus de 300 m√®tres",
        "Indice 2 : Moins de 400 m√®tres",
        "Indice 3 : Bonne r√©ponse : 385 m√®tres"
      ]
    },
    {
      id: 8,
      location: "üßë‚Äçüé® All√©e Paysag√®re",
      question: "Un lieu f√©erique avec des installations artistiques.\n\nQuestion : Qui a cr√©√© les sculptures de l'All√©e Paysag√®re ?",
      type: "multiple",
      options: [
        "A. Kostiantyn Skrytutsky",
        "B. Illia Repin",
        "C. Oleh Pinchuk",
        "D. Lesia Ukrainka"
      ],
      correct: "A",
      bonus: "Inventez un nom pour l'un des personnages-sculptures. Quel est son super-pouvoir ?",
      hints: [
        "Indice 1 : Sculpteur ukrainien contemporain",
        "Indice 2 : Cr√©e des personnages f√©eriques",
        "Indice 3 : Bonne r√©ponse : A. Kostiantyn Skrytutsky"
      ]
    },
    {
      id: 9,
      location: "üç´ Fontaine Roshen",
      question: "Ici les soir√©es proposent des spectacles de lumi√®re et de musique.\n\nQuestion : En quelle ann√©e a-t-elle √©t√© ouverte ?",
      type: "open",
      correct: "2011",
      bonus: "Prenez une photo du reflet de la lumi√®re sur l'eau. Quelles couleurs voyez-vous ?",
      hints: [
        "Indice 1 : D√©but des ann√©es 2010",
        "Indice 2 : Ann√©e apr√®s 2010",
        "Indice 3 : Bonne r√©ponse : 2011"
      ]
    },
    {
      id: 10,
      location: "üèü Stade Olympique",
      question: "Lieu de batailles de football et de concerts.\n\nQuestion : Combien de spectateurs le stade peut-il accueillir ?",
      type: "open",
      correct: "70050",
      bonus: "Prenez une photo d'une perspective 'football'. Avez-vous l'air d'un entra√Æneur ?",
      hints: [
        "Indice 1 : Plus de 70 mille",
        "Indice 2 : Nombre exact avec des z√©ros",
        "Indice 3 : Bonne r√©ponse : 70050"
      ]
    }
  ],
  de: [
    {
      id: 1,
      location: "üè∞ Sophienplatz",
      question: "Hier steht ein Denkmal f√ºr einen Hetman, der oft mit einer anderen historischen Figur verwechselt wird.\n\nFrage: Wer ist auf dem Denkmal dargestellt?",
      type: "multiple",
      options: [
        "A. Ivan Mazepa",
        "B. Bogdan Khmelnitsky", 
        "C. Petro Sahaidachny",
        "D. Danylo Halytsky"
      ],
      correct: "B",
      bonus: "Finden Sie ein Schild an der Fassade gegen√ºber dem Denkmal mit mehr als 2 Farben. Schreiben Sie es auf oder machen Sie ein Selfie und posten Sie es mit #KyivQuest",
      hints: [
        "Hinweis 1: Dies ist eine prominente Figur der Kosakengeschichte",
        "Hinweis 2: Sein Name ist mit dem Befreiungskrieg von 1648 verbunden",
        "Hinweis 3: Richtige Antwort: B. Bogdan Khmelnitsky"
      ]
    },
    {
      id: 2,
      location: "üïç Andreaskirche",
      question: "Eines der Symbole von Kiew, im Barockstil erbaut.\n\nFrage: Wer war der Architekt dieser Kirche?",
      type: "multiple",
      options: [
        "A. Francesco Rastrelli",
        "B. Volodymyr Nikolaev",
        "C. Ivan Hryhorovych-Barsky", 
        "D. Auguste Montferrand"
      ],
      correct: "A",
      bonus: "Z√§hlen Sie die Anzahl der S√§ulen um die Kirche. Wie viele sind es?",
      hints: [
        "Hinweis 1: Italienischer Architekt der Barockzeit",
        "Hinweis 2: Entwarf auch den Winterpalast in St. Petersburg",
        "Hinweis 3: Richtige Antwort: A. Francesco Rastrelli"
      ]
    },
    {
      id: 3,
      location: "üèõÔ∏è Haus mit Chim√§ren",
      question: "Dieses Haus ist eine Legende des Kiewer Jugendstils mit fantastischen Kreaturen.\n\nFrage: Welchen Beruf hatte Architekt Vladislav Horodetsky neben der Architektur?",
      type: "multiple",
      options: [
        "A. Politiker",
        "B. J√§ger",
        "C. K√ºnstler",
        "D. Schauspieler"
      ],
      correct: "B",
      bonus: "Finden Sie eine Kreatur an der Fassade, die im echten Leben nicht existiert. Wie sieht sie aus?",
      hints: [
        "Hinweis 1: Sein Hobby spiegelt sich in der Dekoration des Geb√§udes wider",
        "Hinweis 2: Die Tiere an der Fassade sind seine Troph√§en",
        "Hinweis 3: Richtige Antwort: B. J√§ger"
      ]
    },
    {
      id: 4,
      location: "üöÉ Standseilbahn",
      question: "Verbindet Podil mit der Oberstadt.\n\nFrage: In welchem Jahr wurde die Kiewer Standseilbahn er√∂ffnet?",
      type: "open",
      correct: "1905",
      bonus: "Machen Sie ein Foto des fahrenden Wagens oder schreiben Sie auf, wie viele Sekunden die Fahrt nach oben dauert.",
      hints: [
        "Hinweis 1: Anfang des 20. Jahrhunderts",
        "Hinweis 2: 5 Jahre nach 1900",
        "Hinweis 3: Richtige Antwort: 1905"
      ]
    },
    {
      id: 5,
      location: "üíí Podil, Kontraktplatz",
      question: "Hier steht ein Denkmal f√ºr den legend√§ren Philosophen.\n\nFrage: Welcher Satz ist am Denkmal f√ºr Hryhoriy Skovoroda eingraviert?",
      type: "open",
      correct: "erkenne dich selbst",
      bonus: "Finden Sie das n√§chste Wandbild und beschreiben Sie es.",
      hints: [
        "Hinweis 1: Altgriechische philosophische Weisheit",
        "Hinweis 2: Ein Aufruf zur Selbsterkenntnis",
        "Hinweis 3: Richtige Antwort: erkenne dich selbst"
      ]
    },
    {
      id: 6,
      location: "üß™ Nationale Bibliothek Vernadsky",
      question: "Eine der gr√∂√üten Bibliotheken der Welt.\n\nFrage: Wie viele Stockwerke hat das Hauptgeb√§ude?",
      type: "open",
      correct: "22",
      bonus: "Z√§hlen Sie die Anzahl der Lampen im Lesesaal. Sind sie alle gleich?",
      hints: [
        "Hinweis 1: Mehr als 20 Stockwerke",
        "Hinweis 2: Gerade Zahl",
        "Hinweis 3: Richtige Antwort: 22"
      ]
    },
    {
      id: 7,
      location: "üóº Fernsehturm",
      question: "Das h√∂chste Bauwerk der Ukraine.\n\nFrage: Wie hoch ist er genau?",
      type: "open",
      correct: "385",
      bonus: "Finden Sie einen Punkt, wo er sich in Glas oder Wasser spiegelt. Machen Sie ein Foto.",
      hints: [
        "Hinweis 1: Mehr als 300 Meter",
        "Hinweis 2: Weniger als 400 Meter",
        "Hinweis 3: Richtige Antwort: 385 Meter"
      ]
    },
    {
      id: 8,
      location: "üßë‚Äçüé® Landschaftsallee",
      question: "Ein m√§rchenhafter Ort mit Kunstinstallationen.\n\nFrage: Wer schuf die Skulpturen in der Landschaftsallee?",
      type: "multiple",
      options: [
        "A. Kostiantyn Skrytutsky",
        "B. Illia Repin",
        "C. Oleh Pinchuk",
        "D. Lesia Ukrainka"
      ],
      correct: "A",
      bonus: "Denken Sie sich einen Namen f√ºr eine der Skulptur-Figuren aus. Was ist ihre Superkraft?",
      hints: [
        "Hinweis 1: Zeitgen√∂ssischer ukrainischer Bildhauer",
        "Hinweis 2: Erschafft m√§rchenhafte Charaktere",
        "Hinweis 3: Richtige Antwort: A. Kostiantyn Skrytutsky"
      ]
    },
    {
      id: 9,
      location: "üç´ Roshen-Brunnen",
      question: "Hier finden abends Licht- und Musikshows statt.\n\nFrage: In welchem Jahr wurde er er√∂ffnet?",
      type: "open",
      correct: "2011",
      bonus: "Machen Sie ein Foto von der Lichtreflexion auf dem Wasser. Welche Farben sehen Sie?",
      hints: [
        "Hinweis 1: Anfang der 2010er Jahre",
        "Hinweis 2: Jahr nach 2010",
        "Hinweis 3: Richtige Antwort: 2011"
      ]
    },
    {
      id: 10,
      location: "üèü Olympiastadion",
      question: "Schauplatz f√ºr Fu√üballschlachten und Konzerte.\n\nFrage: Wie viele Zuschauer fasst das Stadion?",
      type: "open",
      correct: "70050",
      bonus: "Machen Sie ein Foto aus 'Fu√üball'-Perspektive. Sehen Sie aus wie ein Trainer?",
      hints: [
        "Hinweis 1: Mehr als 70 Tausend",
        "Hinweis 2: Genaue Zahl mit Nullen",
        "Hinweis 3: Richtige Antwort: 70050"
      ]
    }
  ]
};

function App() {
  const [gameState, setGameState] = useState('start'); // start, playing, finished, admin, teamSetup
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [teamName, setTeamName] = useState('');
  const [teamId, setTeamId] = useState('');
  const [startTime, setStartTime] = useState(null);
  const [endTime, setEndTime] = useState(null);
  const [selectedAnswer, setSelectedAnswer] = useState('');
  const [showResult, setShowResult] = useState(false);
  const [language, setLanguage] = useState('ua');
  const [adminPassword, setAdminPassword] = useState('12345');
  
  // Admin login states
  const [adminLogin, setAdminLogin] = useState('');
  const [adminPasswordInput, setAdminPasswordInput] = useState('');
  const [showPasswordChange, setShowPasswordChange] = useState(false);
  const [newPassword, setNewPassword] = useState('');
  
  // Hints system - sequential unlock
  const [hintsUsed, setHintsUsed] = useState({});
  const [hintTimers, setHintTimers] = useState({});

  // Check admin route
  useEffect(() => {
    if (window.location.pathname === '/admin') {
      setGameState('admin');
    }
  }, []);

  useEffect(() => {
    // Load saved progress and settings
    const saved = localStorage.getItem('kyiv-quest-progress');
    const savedSettings = localStorage.getItem('kyiv-quest-settings');
    
    if (saved) {
      const data = JSON.parse(saved);
      setCurrentQuestion(data.currentQuestion || 0);
      setAnswers(data.answers || {});
      setTeamName(data.teamName || '');
      setTeamId(data.teamId || '');
      setHintsUsed(data.hintsUsed || {});
      if (data.startTime) {
        setStartTime(data.startTime);
        setGameState('playing');
      }
    }
    
    if (savedSettings) {
      const settings = JSON.parse(savedSettings);
      setLanguage(settings.language || 'ua');
      setAdminPassword(settings.adminPassword || '12345');
    }
  }, []);

  useEffect(() => {
    // Save progress
    if (gameState === 'playing') {
      const data = {
        currentQuestion,
        answers,
        teamName,
        teamId,
        startTime,
        hintsUsed
      };
      localStorage.setItem('kyiv-quest-progress', JSON.stringify(data));
    }
    
    // Save settings
    const settings = {
      language,
      adminPassword
    };
    localStorage.setItem('kyiv-quest-settings', JSON.stringify(settings));
  }, [currentQuestion, answers, teamName, teamId, startTime, gameState, hintsUsed, language, adminPassword]);

  useEffect(() => {
    // Initialize sequential hint timers when question changes
    if (gameState === 'playing') {
      const questionKey = currentQuestion;
      if (!hintTimers[questionKey]) {
        const newTimers = { ...hintTimers };
        newTimers[questionKey] = {
          hint1: Date.now() + 60000, // 1 minute for first hint
          hint2: null, // Will be set when first hint is used
          hint3: null  // Will be set when second hint is used
        };
        setHintTimers(newTimers);
      }
    }
  }, [currentQuestion, gameState]);

  const t = (key) => TRANSLATIONS[language][key] || key;
  const getQuestions = () => QUESTIONS[language] || QUESTIONS.ua;

  const generateTeamId = () => {
    return Math.random().toString(36).substr(2, 6).toUpperCase();
  };

  const generateQRCode = (teamId) => {
    const url = `${window.location.origin}?join=${teamId}`;
    return `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(url)}`;
  };

  const createTeam = () => {
    if (!teamName.trim()) return;
    const newTeamId = generateTeamId();
    setTeamId(newTeamId);
    setGameState('teamSetup');
  };

  const startGame = () => {
    setStartTime(Date.now());
    setGameState('playing');
    setCurrentQuestion(0);
    setAnswers({});
    setHintsUsed({});
    setHintTimers({});
  };

  const handleAnswer = () => {
    if (!selectedAnswer || !selectedAnswer.trim()) {
      return;
    }
    
    const questions = getQuestions();
    const question = questions[currentQuestion];
    const isCorrect = checkAnswer(selectedAnswer, question);
    
    const newAnswers = {
      ...answers,
      [currentQuestion]: {
        answer: selectedAnswer,
        correct: isCorrect,
        timestamp: Date.now()
      }
    };
    setAnswers(newAnswers);
    setShowResult(true);
    
    setTimeout(() => {
      setShowResult(false);
      setSelectedAnswer('');
      
      // Only move to next question if answer is correct
      if (isCorrect) {
        if (currentQuestion < questions.length - 1) {
          setCurrentQuestion(currentQuestion + 1);
        } else {
          // Game finished
          setEndTime(Date.now());
          setGameState('finished');
          localStorage.removeItem('kyiv-quest-progress');
        }
      }
    }, 3000);
  };

  const checkAnswer = (answer, question) => {
    if (question.type === 'multiple') {
      return answer === question.correct;
    } else {
      const correct = question.correct.toLowerCase().trim();
      const userAnswer = answer.toLowerCase().trim();
      return userAnswer === correct || 
             userAnswer.includes(correct) || 
             correct.includes(userAnswer) ||
             (parseInt(userAnswer) && parseInt(userAnswer) === parseInt(correct));
    }
  };

  const useHint = (hintIndex) => {
    const questionKey = currentQuestion;
    const newHintsUsed = { ...hintsUsed };
    if (!newHintsUsed[questionKey]) {
      newHintsUsed[questionKey] = [];
    }
    if (!newHintsUsed[questionKey].includes(hintIndex)) {
      newHintsUsed[questionKey].push(hintIndex);
      setHintsUsed(newHintsUsed);
      
      // Set timer for next hint when current hint is used
      const newTimers = { ...hintTimers };
      if (hintIndex === 0) {
        // When first hint used, start timer for second hint (5 min from now)
        newTimers[questionKey].hint2 = Date.now() + 300000;
      } else if (hintIndex === 1) {
        // When second hint used, start timer for third hint (10 min from now)
        newTimers[questionKey].hint3 = Date.now() + 600000;
      }
      setHintTimers(newTimers);
    }
  };

  const getRandomWrongMessage = () => {
    const messages = WRONG_MESSAGES[language] || WRONG_MESSAGES.ua;
    return messages[Math.floor(Math.random() * messages.length)];
  };

  const handleAdminLogin = () => {
    if (adminLogin === 'admin' && adminPasswordInput === adminPassword) {
      setGameState('admin');
      setAdminLogin('');
      setAdminPasswordInput('');
    } else {
      alert(t('wrongCredentials'));
    }
  };

  const changeAdminPassword = () => {
    if (newPassword.trim()) {
      setAdminPassword(newPassword);
      setNewPassword('');
      setShowPasswordChange(false);
      alert(t('passwordChanged'));
    }
  };

  const getCompletionTime = () => {
    if (!startTime || !endTime) return 0;
    return Math.floor((endTime - startTime) / 1000);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const formatTimeLeft = (timestamp) => {
    if (!timestamp) return '‚àû';
    const now = Date.now();
    const timeLeft = Math.max(0, Math.floor((timestamp - now) / 1000));
    const mins = Math.floor(timeLeft / 60);
    const secs = timeLeft % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const isHintAvailable = (hintIndex) => {
    const questionKey = currentQuestion;
    const timers = hintTimers[questionKey];
    if (!timers) return false;
    
    const now = Date.now();
    switch (hintIndex) {
      case 0:
        return now >= timers.hint1;
      case 1:
        return timers.hint2 && now >= timers.hint2;
      case 2:
        return timers.hint3 && now >= timers.hint3;
      default:
        return false;
    }
  };

  const restartGame = () => {
    setGameState('start');
    setCurrentQuestion(0);
    setAnswers({});
    setTeamName('');
    setTeamId('');
    setStartTime(null);
    setEndTime(null);
    setSelectedAnswer('');
    setShowResult(false);
    setHintsUsed({});
    setHintTimers({});
    localStorage.removeItem('kyiv-quest-progress');
    window.history.pushState({}, '', '/');
  };

  const getCorrectAnswers = () => {
    return Object.values(answers).filter(a => a.correct).length;
  };

  const changeLanguage = (newLang) => {
    setLanguage(newLang);
  };

  // Admin Panel
  if (gameState === 'admin') {
    // Show login form if not authenticated
    if (window.location.pathname === '/admin' && !adminLogin && adminPasswordInput !== adminPassword) {
      return (
        <div className="min-h-screen bg-gray-900 flex items-center justify-center p-4">
          {/* Language Switcher */}
          <div className="fixed top-4 left-4 z-20">
            <div className="flex space-x-2">
              {['ua', 'en', 'fr', 'de'].map((lang) => (
                <button
                  key={lang}
                  onClick={() => changeLanguage(lang)}
                  className={`w-8 h-8 rounded-full text-xs font-bold transition-all ${
                    language === lang 
                      ? 'neon-button-selected' 
                      : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                  }`}
                >
                  {lang.toUpperCase()}
                </button>
              ))}
            </div>
          </div>

          <div className="max-w-md w-full">
            <div className="neon-box p-8">
              <h1 className="text-2xl font-bold mb-6 neon-text-purple text-center">
                {t('adminLogin')}
              </h1>
              
              <div className="space-y-4">
                <input
                  type="text"
                  placeholder="admin"
                  value={adminLogin}
                  onChange={(e) => setAdminLogin(e.target.value)}
                  className="w-full p-3 bg-gray-800 border border-gray-600 rounded-lg text-white neon-input"
                />
                <input
                  type="password"
                  placeholder={t('adminPassword')}
                  value={adminPasswordInput}
                  onChange={(e) => setAdminPasswordInput(e.target.value)}
                  className="w-full p-3 bg-gray-800 border border-gray-600 rounded-lg text-white neon-input"
                  onKeyPress={(e) => e.key === 'Enter' && handleAdminLogin()}
                />
                <button
                  onClick={handleAdminLogin}
                  className="w-full py-3 neon-button-blue"
                >
                  {t('login')}
                </button>
              </div>
            </div>
          </div>
        </div>
      );
    }

    return (
      <div className="min-h-screen bg-gray-900 text-white p-6">
        {/* Language Switcher */}
        <div className="fixed top-4 left-4 z-20">
          <div className="flex space-x-2">
            {['ua', 'en', 'fr', 'de'].map((lang) => (
              <button
                key={lang}
                onClick={() => changeLanguage(lang)}
                className={`w-8 h-8 rounded-full text-xs font-bold transition-all ${
                  language === lang 
                    ? 'neon-button-selected' 
                    : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                }`}
              >
                {lang.toUpperCase()}
              </button>
            ))}
          </div>
        </div>

        <div className="max-w-4xl mx-auto pt-16">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-3xl font-bold neon-text-purple">
              {t('adminPanel')}
            </h1>
            <button
              onClick={restartGame}
              className="neon-button-blue px-4 py-2"
            >
              {t('exit')}
            </button>
          </div>

          <div className="grid md:grid-cols-2 gap-6">
            <div className="neon-box p-6">
              <h2 className="text-xl font-bold mb-4 neon-text-blue">{t('statistics')}</h2>
              <div className="space-y-2 text-sm">
                <p>{t('totalTeams')} {Object.keys(localStorage).filter(k => k.includes('kyiv-quest')).length}</p>
                <p>{t('activeGames')} -</p>
                <p>{t('completedGames')} -</p>
              </div>
            </div>

            <div className="neon-box p-6">
              <h2 className="text-xl font-bold mb-4 neon-text-green">{t('settings')}</h2>
              <div className="space-y-3">
                <button 
                  onClick={() => setShowPasswordChange(!showPasswordChange)}
                  className="w-full py-2 neon-button-purple text-sm"
                >
                  {t('changePassword')}
                </button>
                {showPasswordChange && (
                  <div className="space-y-2">
                    <input
                      type="password"
                      placeholder={t('newPassword')}
                      value={newPassword}
                      onChange={(e) => setNewPassword(e.target.value)}
                      className="w-full p-2 bg-gray-800 border border-gray-600 rounded text-white text-sm"
                    />
                    <button
                      onClick={changeAdminPassword}
                      className="w-full py-2 neon-button-green text-sm"
                    >
                      {t('changePassword')}
                    </button>
                  </div>
                )}
                <button className="w-full py-2 neon-button-pink text-sm">
                  {t('editQuestions')}
                </button>
                <button className="w-full py-2 neon-button-blue text-sm">
                  {t('exportData')}
                </button>
              </div>
            </div>
          </div>

          <div className="neon-box p-6 mt-6">
            <h2 className="text-xl font-bold mb-4 neon-text-purple">{t('questQuestions')}</h2>
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {getQuestions().map((q, index) => (
                <div key={q.id} className="bg-gray-800 p-4 rounded-lg">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-bold text-blue-400">
                        {index + 1}. {q.location}
                      </h3>
                      <p className="text-sm text-gray-300 mt-1">
                        {q.question.split('\n')[2] || q.question}
                      </p>
                      <p className="text-xs text-green-400 mt-1">
                        {t('correctAnswerLabel')} {q.correct}
                      </p>
                    </div>
                    <button className="text-xs bg-blue-600 px-2 py-1 rounded">
                      {t('edit')}
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Team Setup - QR Code Screen
  if (gameState === 'teamSetup') {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center p-4">
        {/* Language Switcher */}
        <div className="fixed top-4 left-4 z-20">
          <div className="flex space-x-2">
            {['ua', 'en', 'fr', 'de'].map((lang) => (
              <button
                key={lang}
                onClick={() => changeLanguage(lang)}
                className={`w-8 h-8 rounded-full text-xs font-bold transition-all ${
                  language === lang 
                    ? 'neon-button-selected' 
                    : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                }`}
              >
                {lang.toUpperCase()}
              </button>
            ))}
          </div>
        </div>

        <div className="max-w-md w-full text-center">
          <div className="neon-box p-8">
            <h1 className="text-2xl font-bold mb-4 neon-text-blue">
              {t('team')}: {teamName}
            </h1>
            <p className="text-sm text-gray-400 mb-6">
              ID: {teamId}
            </p>
            
            <div className="mb-6">
              <h2 className="text-lg font-bold mb-4 neon-text-purple">
                {t('qrCode')}
              </h2>
              <div className="flex justify-center mb-4">
                <img 
                  src={generateQRCode(teamId)} 
                  alt="QR Code"
                  className="border-2 border-blue-500 rounded-lg neon-glow"
                />
              </div>
              <p className="text-xs text-gray-400">
                {t('scanToJoin')}
              </p>
            </div>

            <div className="mb-6">
              <p className="text-sm text-yellow-400 mb-4">
                {t('waitingForTeam')}
              </p>
            </div>

            <button
              onClick={startGame}
              className="w-full py-3 neon-button-green text-lg font-bold"
            >
              {t('allJoined')}
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (gameState === 'start') {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center p-4">
        {/* Language Switcher */}
        <div className="fixed top-4 left-4 z-20">
          <div className="flex space-x-2">
            {['ua', 'en', 'fr', 'de'].map((lang) => (
              <button
                key={lang}
                onClick={() => changeLanguage(lang)}
                className={`w-8 h-8 rounded-full text-xs font-bold transition-all ${
                  language === lang 
                    ? 'neon-button-selected' 
                    : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                }`}
              >
                {lang.toUpperCase()}
              </button>
            ))}
          </div>
        </div>

        <div className="max-w-md w-full">
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold mb-4 neon-text-blue">
              {t('gameTitle')}
            </h1>
            <p className="text-lg text-gray-300 mb-2">{t('gameSubtitle')}</p>
            <div className="neon-box p-6 mb-6">
              <p className="text-gray-300 text-sm leading-relaxed whitespace-pre-line">
                {t('prologue')}
              </p>
            </div>
          </div>
          
          <div className="space-y-4">
            <input
              type="text"
              placeholder={t('teamName')}
              value={teamName}
              onChange={(e) => setTeamName(e.target.value)}
              className="w-full p-3 bg-gray-800 border border-gray-600 rounded-lg text-white neon-input"
              maxLength="50"
            />
            <button
              onClick={createTeam}
              disabled={!teamName.trim()}
              className="w-full py-3 neon-button-blue disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {t('startQuest')}
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (gameState === 'finished') {
    const completionTime = getCompletionTime();
    const correctAnswers = getCorrectAnswers();
    
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center p-4">
        {/* Language Switcher */}
        <div className="fixed top-4 left-4 z-20">
          <div className="flex space-x-2">
            {['ua', 'en', 'fr', 'de'].map((lang) => (
              <button
                key={lang}
                onClick={() => changeLanguage(lang)}
                className={`w-8 h-8 rounded-full text-xs font-bold transition-all ${
                  language === lang 
                    ? 'neon-button-selected' 
                    : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                }`}
              >
                {lang.toUpperCase()}
              </button>
            ))}
          </div>
        </div>

        <div className="max-w-md w-full text-center">
          <div className="neon-box p-8">
            <h1 className="text-3xl font-bold mb-6 neon-text-purple">
              {t('questCompleted')}
            </h1>
            
            <div className="space-y-4 mb-8">
              <div className="neon-text-blue text-xl">
                {t('team')} {teamName}
              </div>
              <div className="text-gray-300">
                {t('time')} {formatTime(completionTime)}
              </div>
              <div className="text-gray-300">
                {t('correctAnswers')} {correctAnswers}/{getQuestions().length}
              </div>
              <div className="text-2xl">
                {correctAnswers === getQuestions().length ? 'ü•á' : 
                 correctAnswers >= 8 ? 'ü•à' : 
                 correctAnswers >= 6 ? 'ü•â' : 'üèÜ'}
              </div>
            </div>
            
            <div className="space-y-3">
              <button
                onClick={restartGame}
                className="w-full py-3 neon-button-purple"
              >
                {t('startAgain')}
              </button>
              <button
                onClick={() => navigator.share && navigator.share({
                  title: 'KYIV Quest Results',
                  text: `${t('team')} "${teamName}" –∑–∞–≤–µ—Ä—à–∏–ª–∞ KYIV Quest –∑–∞ ${formatTime(completionTime)} –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º ${correctAnswers}/${getQuestions().length}! #KyivQuest`,
                })}
                className="w-full py-3 neon-button-pink"
              >
                {t('shareResult')}
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Playing state
  const questions = getQuestions();
  const question = questions[currentQuestion];
  const progress = ((currentQuestion + 1) / questions.length) * 100;
  const questionKey = currentQuestion;
  const usedHints = hintsUsed[questionKey] || [];
  const timers = hintTimers[questionKey];

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* Language Switcher */}
      <div className="fixed top-4 left-4 z-20">
        <div className="flex space-x-2">
          {['ua', 'en', 'fr', 'de'].map((lang) => (
            <button
              key={lang}
              onClick={() => changeLanguage(lang)}
              className={`w-8 h-8 rounded-full text-xs font-bold transition-all ${
                language === lang 
                  ? 'neon-button-selected' 
                  : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
              }`}
            >
              {lang.toUpperCase()}
            </button>
          ))}
        </div>
      </div>

      {/* Header */}
      <div className="fixed top-0 left-0 right-0 z-10 bg-gray-900 border-b border-gray-700 pt-16">
        <div className="p-4">
          <div className="flex justify-between items-center mb-3">
            <div className="text-sm text-gray-400">
              {teamName} ({teamId})
            </div>
            <button
              onClick={restartGame}
              className="text-xs bg-gray-700 hover:bg-gray-600 px-3 py-1 rounded-full transition-colors"
            >
              {t('restart')}
            </button>
          </div>
          
          {/* Progress bar */}
          <div className="w-full bg-gray-700 rounded-full h-2 overflow-hidden">
            <div 
              className="h-full neon-progress transition-all duration-500"
              style={{ width: `${progress}%` }}
            ></div>
          </div>
          <div className="text-xs text-gray-400 mt-1 text-center">
            {t('question')} {currentQuestion + 1} {t('of')} {questions.length}
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="pt-48 pb-32 px-4">
        <div className="max-w-md mx-auto">
          {showResult ? (
            <div className="neon-box p-6 text-center">
              <div className={`text-2xl mb-4 ${
                answers[currentQuestion]?.correct ? 'neon-text-green' : 'neon-text-red'
              }`}>
                {answers[currentQuestion]?.correct ? t('correct') : '‚ùå ' + getRandomWrongMessage()}
              </div>
              {!answers[currentQuestion]?.correct && (
                <div className="text-gray-300 mb-4">
                  {t('correctAnswer')} {question.correct}
                </div>
              )}
              <div className="text-sm text-gray-400">
                {answers[currentQuestion]?.correct ? 
                  t('nextQuestion') : 
                  t('tryAgain')
                }
              </div>
            </div>
          ) : (
            <>
              <div className="neon-box p-6 mb-6">
                <h2 className="text-lg font-bold mb-4 neon-text-purple">
                  {question.location}
                </h2>
                <p className="text-gray-300 whitespace-pre-line leading-relaxed">
                  {question.question}
                </p>
              </div>

              <div className="space-y-4 mb-6">
                {question.type === 'multiple' ? (
                  question.options.map((option, index) => (
                    <button
                      key={index}
                      onClick={() => setSelectedAnswer(option.charAt(0))}
                      className={`w-full p-3 text-left rounded-lg border transition-all ${
                        selectedAnswer === option.charAt(0)
                          ? 'neon-button-selected' 
                          : 'bg-gray-800 border-gray-600 hover:border-blue-500'
                      }`}
                    >
                      {option}
                    </button>
                  ))
                ) : (
                  <input
                    type="text"
                    placeholder={t('enterAnswer')}
                    value={selectedAnswer}
                    onChange={(e) => setSelectedAnswer(e.target.value)}
                    className="w-full p-3 bg-gray-800 border border-gray-600 rounded-lg neon-input"
                  />
                )}
              </div>

              {/* Continue Button - Centered */}
              <div className="text-center mb-6">
                <button
                  onClick={handleAnswer}
                  disabled={!selectedAnswer || !selectedAnswer.trim()}
                  className="neon-button-blue px-8 py-3 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {t('continue')}
                </button>
              </div>

              {/* Sequential Hints System */}
              <div className="neon-box-subtle p-4 mb-6">
                <h3 className="text-sm font-bold mb-3 text-yellow-400">{t('hints')}</h3>
                <div className="space-y-2">
                  {[0, 1, 2].map((hintIndex) => {
                    const isUsed = usedHints.includes(hintIndex);
                    const isAvailable = isHintAvailable(hintIndex);
                    
                    let timeLeft = '';
                    if (timers && !isUsed && !isAvailable) {
                      if (hintIndex === 0) timeLeft = formatTimeLeft(timers.hint1);
                      if (hintIndex === 1) timeLeft = formatTimeLeft(timers.hint2);
                      if (hintIndex === 2) timeLeft = formatTimeLeft(timers.hint3);
                    }

                    return (
                      <div key={hintIndex} className="flex items-center justify-between text-xs">
                        <span className="text-gray-400">
                          {t('hint')} {hintIndex + 1}:
                        </span>
                        {isUsed ? (
                          <div className="text-yellow-300 text-left flex-1 ml-2">
                            {question.hints[hintIndex]}
                          </div>
                        ) : isAvailable ? (
                          <button
                            onClick={() => useHint(hintIndex)}
                            className="bg-yellow-600 hover:bg-yellow-500 px-2 py-1 rounded text-xs"
                          >
                            {t('show')}
                          </button>
                        ) : (
                          <span className="text-gray-500">
                            {timeLeft || '‚àí'}
                          </span>
                        )}
                      </div>
                    );
                  })}
                </div>
              </div>

              {question.bonus && (
                <div className="neon-box-subtle p-4 mb-6">
                  <div className="text-sm text-yellow-400 mb-2">{t('bonusTask')}</div>
                  <div className="text-xs text-gray-400">{question.bonus}</div>
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
}

export default App;